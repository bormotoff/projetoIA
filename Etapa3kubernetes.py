import os
import sys
import yaml
import pyodbc
import pandas as pd
from pathlib import Path

# ---------------- Fun√ß√£o para carregar dados do YAML (Etapa 1) ----------------
def carregar_yaml(guid):
    caminho = os.path.join("Historico", f"{guid}.yaml")
    if not os.path.exists(caminho):
        raise FileNotFoundError(f"‚ùå Arquivo {caminho} n√£o encontrado. Rode a Etapa 1 antes.")
    
    with open(caminho, "r", encoding="utf-8") as f:
        return yaml.safe_load(f)

# ---------------- Conectar ao Dremio usando Docker Secrets ----------------
def conectar_dremio():
    """
    Conecta ao Dremio lendo credenciais de Docker Secrets
    Secrets esperados: dremio-host, dremio-port, dremio-user, dremio-password
    """
    secrets_path = Path('/run/secrets')
    
    def ler_secret(nome_secret, valor_default=None):
        """L√™ um secret ou usa valor padr√£o/fallback"""
        secret_file = secrets_path / nome_secret
        
        if secret_file.exists():
            with open(secret_file, 'r') as f:
                return f.read().strip()
        elif valor_default is not None:
            return valor_default
        else:
            raise FileNotFoundError(f"Secret {nome_secret} n√£o encontrado e nenhum valor padr√£o definido")
    
    try:
        # L√™ secrets com fallbacks
        host = ler_secret('dremio-host')
        port = ler_secret('dremio-port', '31010')  # Porta padr√£o
        user = ler_secret('dremio-user')
        password = ler_secret('dremio-password')
        
        # Constru√ß√£o da string de conex√£o
        conn_str = (
            "Driver={Dremio ODBC Driver 64-bit};"
            "ConnectionType=Direct;"
            f"HOST={host};"
            f"PORT={port};"
            f"UID={user};"
            f"PWD={password};"
            "AuthenticationType=Plain;"
            "UseUnicode=Yes;"
            "CharacterSet=UTF-8;"
        )
        
        print(f"üîó Conectando ao Dremio em {host}:{port}...")
        connection = pyodbc.connect(conn_str, autocommit=True, timeout=30)
        print("‚úÖ Conex√£o estabelecida com sucesso")
        return connection
        
    except Exception as e:
        print(f"‚ùå Erro ao conectar ao Dremio: {e}")
        raise

# ---------------- Rodar query e salvar CSV ----------------
def gerar_amostra(guid, tabela):
    """
    Gera amostra aleat√≥ria da tabela e salva como CSV
    """
    conn = None
    try:
        conn = conectar_dremio()
        
        # Query com amostragem aleat√≥ria
        query = f'SELECT * FROM "{tabela}" ORDER BY RANDOM() LIMIT 200'
        print(f"üìä Executando query: {query}")
        
        df = pd.read_sql(query, conn)
        print(f"‚úÖ Query executada. {len(df)} registros recuperados")
        
        # Salvar CSV
        pasta = "Historico"
        os.makedirs(pasta, exist_ok=True)
        caminho_csv = os.path.join(pasta, f"{guid}_amostra.csv")
        df.to_csv(caminho_csv, index=False, encoding="utf-8")
        
        # Estat√≠sticas b√°sicas
        print(f"üìà Estat√≠sticas da amostra:")
        print(f"   - Total de registros: {len(df)}")
        print(f"   - Colunas: {len(df.columns)}")
        print(f"   - Tamanho do arquivo: {os.path.getsize(caminho_csv)} bytes")
        print(f"üíæ Amostra salva em: {caminho_csv}")
        
        return caminho_csv
        
    except pyodbc.Error as e:
        print(f"‚ùå Erro de banco de dados: {e}")
        raise
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        raise
    finally:
        if conn:
            conn.close()
            print("üîå Conex√£o fechada")

# ---------------- Valida√ß√£o de Secrets ----------------
def validar_secrets():
    """
    Valida se os secrets necess√°rios est√£o presentes
    """
    secrets_obrigatorios = ['dremio-host', 'dremio-user', 'dremio-password']
    secrets_path = Path('/run/secrets')
    
    print("üîç Validando Docker Secrets...")
    
    for secret in secrets_obrigatorios:
        secret_file = secrets_path / secret
        if not secret_file.exists():
            print(f"‚ö†Ô∏è  Aviso: Secret {secret} n√£o encontrado em {secret_file}")
        else:
            print(f"‚úÖ Secret {secret} encontrado")
    
    # Verifica se pelo menos os obrigat√≥rios existem
    secrets_existentes = [s for s in secrets_obrigatorios if (secrets_path / s).exists()]
    if len(secrets_existentes) < len(secrets_obrigatorios):
        print("‚ùå Secrets obrigat√≥rios faltando. Verifique a montagem dos volumes.")
        return False
    
    return True

# ---------------- Execu√ß√£o Principal ----------------
if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("‚ùå Uso: python Etapa3.py <GUID>")
        print("üí° Exemplo: python Etapa3.py 123e4567-e89b-12d3-a456-426614174000")
        sys.exit(1)

    guid = sys.argv[1]
    print(f"üöÄ Iniciando Etapa 3 para GUID: {guid}")

    try:
        # Valida secrets antes de prosseguir
        if not validar_secrets():
            sys.exit(1)
        
        # Carrega configura√ß√£o do YAML
        dados = carregar_yaml(guid)
        tabela = dados.get("dremio_table")
        
        if not tabela:
            raise ValueError("‚ö†Ô∏è Campo 'dremio_table' n√£o encontrado no YAML da Etapa 1.")

        print(f"üìã Tabela alvo: {tabela}")
        
        # Gera amostra
        caminho_csv = gerar_amostra(guid, tabela)
        
        print(f"üéâ Etapa 3 conclu√≠da com sucesso!")
        print(f"üìÅ Arquivo gerado: {caminho_csv}")

    except FileNotFoundError as e:
        print(f"‚ùå Arquivo n√£o encontrado: {e}")
        sys.exit(1)
    except ValueError as e:
        print(f"‚ùå Erro de valida√ß√£o: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erro na Etapa 3: {e}")
        sys.exit(1)